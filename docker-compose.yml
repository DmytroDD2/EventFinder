
services:
  frontend:
    build:
      dockerfile: ./Dockerfile
      context: ./frontend  # Вказуємо на папку frontend
    ports:
      - "3000:80"
    volumes:
      - .:/app
        - /app/node_modules
    environment:
      NODE_ENV: development
    stdin_open: true
    tty: true
    networks:
      - app_network

  backend:
    build:
      context: ./backend  # Вказуємо на папку backend
      dockerfile: Dockerfile
    command: /bin/sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    env_file:
      - path: ./.env
    volumes:
      - ./backend:/usr/src/app
    ports:
      - "8000:8000"
    depends_on:
      - db

    networks:
      - app_network

  db:
    image: postgres:12.0-alpine
    volumes:
      - ./postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=nudges
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - app_network

  test_db:
    image: postgres:12.0-alpine
    volumes:
      - ./postgres_test_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
      - POSTGRES_DB=test_db
    ports:
      - "5433:5432"
    networks:
      - app_network

  rabbitmq:
    image: "rabbitmq:3.13-management-alpine"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app_network

  celery_worker:
    build:
      context: ./backend
    command: celery -A celery_worker worker --loglevel=info
    env_file:
      - path: ./.env
    depends_on:
      - rabbitmq
    networks:
      - app_network

  celery_beat:
    build:
      context: ./backend
    command: celery -A celery_worker beat --loglevel=info
    depends_on:
      - rabbitmq
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network:
    driver: bridge